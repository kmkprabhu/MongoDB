# MySQL vs MongoDB Command Comparison with Examples

| **MySQL Command**               | **MongoDB Command**                                         | **Example (MySQL)**                                                                | **Example (MongoDB)**                                                               |
|----------------------------------|-------------------------------------------------------------|------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------|
| **SELECT**                       | `find()`                                                    | `SELECT * FROM users WHERE age > 30;`                                              | `db.users.find({ age: { $gt: 30 } })`                                               |
| **WHERE**                        | `find()` (with query)                                       | `SELECT * FROM users WHERE age > 30;`                                              | `db.users.find({ age: { $gt: 30 } })`                                               |
| **IN**                           | `$in`                                                        | `SELECT * FROM users WHERE city IN ('New York', 'Los Angeles');`                   | `db.users.find({ city: { $in: ['New York', 'Los Angeles'] } })`                     |
| **BETWEEN**                      | `$gte` and `$lte`                                            | `SELECT * FROM users WHERE age BETWEEN 20 AND 30;`                                 | `db.users.find({ age: { $gte: 20, $lte: 30 } })`                                     |
| **LIKE**                         | `$regex`                                                     | `SELECT * FROM users WHERE name LIKE 'John%';`                                     | `db.users.find({ name: { $regex: '^John' } })`                                      |
| **AND/OR**                       | `$and` / `$or`                                               | `SELECT * FROM users WHERE age > 25 AND city = 'New York';`                        | `db.users.find({ $and: [{ age: { $gt: 25 } }, { city: 'New York' }] })`            |
| **ORDER BY**                     | `sort()`                                                     | `SELECT * FROM users ORDER BY age DESC;`                                           | `db.users.find().sort({ age: -1 })`                                                 |
| **LIMIT**                        | `limit()`                                                    | `SELECT * FROM users LIMIT 10;`                                                   | `db.users.find().limit(10)`                                                         |
| **GROUP BY**                     | `$group` (Aggregation)                                       | `SELECT city, COUNT(*) FROM users GROUP BY city;`                                  | `db.users.aggregate([{ $group: { _id: "$city", count: { $sum: 1 } } }])`            |
| **HAVING**                       | `$match` (Aggregation)                                       | `SELECT city, COUNT(*) FROM users GROUP BY city HAVING COUNT(*) > 5;`              | `db.users.aggregate([{ $group: { _id: "$city", count: { $sum: 1 } } }, { $match: { count: { $gt: 5 } } }])` |
| **COUNT**                        | `$count` (Aggregation)                                       | `SELECT COUNT(*) FROM users WHERE city = 'New York';`                              | `db.users.aggregate([{ $match: { city: 'New York' } }, { $count: 'totalCount' }])`  |
| **SUM**                          | `$sum` (Aggregation)                                         | `SELECT SUM(salary) FROM employees;`                                              | `db.employees.aggregate([{ $group: { _id: null, totalSalary: { $sum: "$salary" } } }])` |
| **AVG**                          | `$avg` (Aggregation)                                         | `SELECT AVG(age) FROM users;`                                                     | `db.users.aggregate([{ $group: { _id: null, avgAge: { $avg: "$age" } } }])`         |
| **MIN**                          | `$min` (Aggregation)                                         | `SELECT MIN(age) FROM users;`                                                     | `db.users.aggregate([{ $group: { _id: null, minAge: { $min: "$age" } } }])`         |
| **MAX**                          | `$max` (Aggregation)                                         | `SELECT MAX(age) FROM users;`                                                     | `db.users.aggregate([{ $group: { _id: null, maxAge: { $max: "$age" } } }])`         |
| **DISTINCT**                     | `distinct()`                                                 | `SELECT DISTINCT city FROM users;`                                               | `db.users.distinct("city")`                                                         |
| **INSERT INTO**                  | `insertOne()` or `insertMany()`                              | `INSERT INTO users (name, age) VALUES ('John', 30);`                              | `db.users.insertOne({ name: 'John', age: 30 })`                                     |
| **UPDATE**                       | `updateOne()` or `updateMany()`                              | `UPDATE users SET city = 'Los Angeles' WHERE id = 1;`                             | `db.users.updateOne({ id: 1 }, { $set: { city: 'Los Angeles' } })`                  |
| **DELETE**                       | `deleteOne()` or `deleteMany()`                              | `DELETE FROM users WHERE id = 1;`                                                 | `db.users.deleteOne({ id: 1 })` or `db.users.deleteMany({ age: { $lt: 20 } })`      |
| **CREATE TABLE**                 | `db.createCollection()`                                      | `CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(100), age INT);`            | `db.createCollection("users")`                                                     |
| **ALTER TABLE**                  | `db.collection.update()` (modifying schema manually)        | `ALTER TABLE users ADD COLUMN address VARCHAR(255);`                               | MongoDB has flexible schema, so no direct ALTER command. Changes are made directly in documents. |
| **DROP TABLE**                   | `db.collection.drop()`                                       | `DROP TABLE users;`                                                              | `db.users.drop()`                                                                   |
| **DESCRIBE TABLE**               | `db.collection.stats()`                                      | `DESCRIBE users;`                                                                 | `db.users.stats()`                                                                  |
| **JOIN**                         | `$lookup` (Aggregation)                                      | `SELECT * FROM users u JOIN orders o ON u.id = o.user_id;`                        | `db.users.aggregate([{ $lookup: { from: "orders", localField: "id", foreignField: "user_id", as: "orders" } }])` |
| **UNION**                        | `Aggregation with $group and $project`                        | MongoDB doesn’t support direct UNION, but aggregation can achieve similar results. | `SELECT * FROM users UNION SELECT * FROM admins;`                                 | MongoDB doesn’t support `UNION` directly. Use aggregation pipelines instead.        |
| **TRANSACTIONS**                 | `session.startTransaction()` (Requires replica set in MongoDB) | Supports atomic operations within a transaction.                                | `START TRANSACTION;`                                                             | `const session = db.getMongo().startSession(); session.startTransaction();`        |
| **INDEX**                        | `createIndex()`                                              | `CREATE INDEX idx_name ON users (name);`                                          | `db.users.createIndex({ name: 1 })`                                                 |
| **SHOW TABLES**                  | `show collections`                                           | `SHOW TABLES;`                                                                   | `show collections`                                                                  |
| **SHOW COLUMNS**                 | `db.collection.getIndexes()`                                 | `SHOW COLUMNS FROM users;`                                                       | `db.users.getIndexes()`                                                             |
| **EXPLAIN**                      | `explain()`                                                  | `EXPLAIN SELECT * FROM users WHERE age > 30;`                                     | `db.users.find({ age: { $gt: 30 } }).explain()`                                     |
| **TRANSACTION COMMIT/ROLLBACK**  | `session.commitTransaction()` / `session.abortTransaction()` | Used to commit or abort a transaction in both databases.                        | `COMMIT;`                                                                         | `session.commitTransaction();` or `session.abortTransaction();`                    |
| **SET**                          | Not directly supported                                        | MongoDB doesn’t support `SET`, but it can perform updates with `update()` or aggregation. | `SET @var = 5;`                                                                  | MongoDB doesn't have a direct equivalent of `SET`. Update operations are done via `$set` in updates. |
| **USE DATABASE**                 | `use <database>`                                              | `USE mydb;`                                                                      | `use mydb;`                                                                        |
| **SHOW DATABASES**               | `show dbs`                                                   | `SHOW DATABASES;`                                                                | `show dbs`                                                                          |
| **DROP DATABASE**                | `db.dropDatabase()`                                           | `DROP DATABASE mydb;`                                                            | `db.dropDatabase()`                                                                 |
| **CREATE DATABASE**              | `use <database>` (MongoDB automatically creates database)    | `CREATE DATABASE mydb;`                                                          | `use mydb;` (MongoDB creates it automatically)                                      |
| **DESCRIBE DATABASE**            | `db.stats()`                                                 | `DESCRIBE DATABASE mydb;`                                                       | `db.stats()`                                                                       |
| **SHOW INDEXES**                 | `db.collection.getIndexes()`                                 | `SHOW INDEXES FROM users;`                                                       | `db.users.getIndexes()`                                                             |
| **BACKUP DATABASE**              | `mongodump` (using the command line)                          | `mysqldump -u root -p mydb > backup.sql`                                         | `mongodump --db mydb --out /backup/`                                                |

